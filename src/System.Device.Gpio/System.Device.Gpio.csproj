<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <RuntimeIdentifiers>win;linux</RuntimeIdentifiers>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <LangVersion>preview</LangVersion>
    <!-- Only produce reference assembly in one of our inner builds -->
    <ProduceReferenceAssembly Condition="'$(TargetsLinux)' == 'true'">true</ProduceReferenceAssembly>
    <TargetRefPath>$(OutputPath)$(TargetFramework)\ref\$(MSBuildProjectName).dll</TargetRefPath>
    <IsPackable>true</IsPackable>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GeneratePlatformNotSupportedAssembly Condition="'$(RuntimeIdentifier)' == ''">true</GeneratePlatformNotSupportedAssembly>
    <Configurations>Debug;Release;Windows-Debug;Linux-Debug</Configurations>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="winmd\**" />
    <EmbeddedResource Remove="winmd\**" />
    <None Remove="winmd\**" />
    <PackageReference Include="Microsoft.Win32.Registry" Version="4.5.0" /> <!-- This is Windows specific -->
    <PackageReference Include="System.Runtime.WindowsRuntime" Version="4.3.0" /> <!-- This is Windows specific -->
    <PackageReference Include="System.Threading.Tasks.Extensions" Version="4.5.1" />
    <PackageReference Include="System.Memory" Version="4.5.1" />
    <PackageReference Include="System.Runtime.InteropServices.WindowsRuntime" Version="4.3.0" /> <!-- This is Windows specific -->
    <PackageReference Include="Microsoft.DotNet.GenAPI" Version="$(MicrosoftDotNetGenApiPackageVersion)">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>
  <ItemGroup Condition="'$(TargetsLinux)' == 'true'">
    <!--Excluding Windows implementations-->
    <Compile Remove="**\*.Windows.cs" />
    <Compile Remove="Interop\Windows\**\*.cs" />
    <CreateDirectory Include="$(OutputPath)..\ref\" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetsWindows)' == 'true'">
    <!--Excluding Linux implementations-->
    <Compile Remove="**\*.Linux.cs" />
    <Compile Remove="Interop\Unix\**\*.cs" />
    <Reference Include="Windows.Devices.DevicesLowLevelContract">
      <HintPath>winmd\Windows.Devices.DevicesLowLevelContract.winmd</HintPath>
      <IsWinMDFile>true</IsWinMDFile>
    </Reference>
    <Reference Include="Windows.Foundation.FoundationContract">
      <HintPath>winmd\Windows.Foundation.FoundationContract.winmd</HintPath>
      <IsWinMDFile>true</IsWinMDFile>
    </Reference>
    <Reference Include="Windows.Foundation.UniversalApiContract">
      <HintPath>winmd\Windows.Foundation.UniversalApiContract.winmd</HintPath>
      <IsWinMDFile>true</IsWinMDFile>
    </Reference>
  </ItemGroup>

  <!-- Targets for building the notsupported assembly -->
  <Target Name="SetupEnvironmentForNotSupportedAssembly">
    <PropertyGroup>
      <OutDir>$(OutDir)notsupported\</OutDir>
      <ProjectDepsFilePath>$(OutDir)$(ProjectDepsFileName)</ProjectDepsFilePath>
    </PropertyGroup>
    <ItemGroup>
      <Compile Remove="@(Compile)" />
      <CreateDirectory Include="$(OutputPath)notsupported\" />
    </ItemGroup>
  </Target>

  <Target Name="ResolveMatchingContract">
    <ItemGroup>
      <ResolvedMatchingContract Include="$(OutputPath)ref\$(MSBuildProjectName).dll" />
    </ItemGroup>
  </Target>

  <Target Name="BuildNotSupportedAssembly"
          Condition="'$(RuntimeIdentifier)' == ''"
          AfterTargets="Build"
          DependsOnTargets="SetupEnvironmentForNotSupportedAssembly;$(BuildDependsOn)" />

  <!-- Remove all the default content to be includded in the package as we have custom logic that handles that. -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);RemoveBuildOutputBeforePackaging</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <Target Name="RemoveBuildOutputBeforePackaging" DependsOnTargets="BuiltProjectOutputGroup">
    <ItemGroup>
      <BuiltProjectOutputGroupOutput Remove="@(BuiltProjectOutputGroupOutput)" />
      <DocumentationProjectOutputGroupOutput Remove="@(DocumentationProjectOutputGroupOutput)" />
    </ItemGroup>
  </Target>

  <!-- Set the path to the symbols that will go into the snupkg -->
  <Target Name="GetSymbolsForSnupkg" Condition="'$(DebugType)' == 'Portable'" BeforeTargets="GenerateNuspec">
    <!-- First we remove the calculated location for pdbs since it is wrong. -->
    <ItemGroup>
      <_TargetPathsToSymbols Remove="@(_TargetPathsToSymbols)" />
    </ItemGroup>

    <!-- Add the linux and windows specific pdbs -->
    <ItemGroup>
      <!-- _TargetPathsToSymbols doesn't support PackagePath and instead the output path is set to lib/$(TargetFramework)/$(TargetPath) 
           Setting TargetPath to ./../../ will get us back to the root of the package, so now we are able to place the pdbs inside
           the runtimes folder.
      -->
      <_TargetPathsToSymbols Include="$(OutputPath)linux/$(AssemblyName).pdb">
        <TargetPath>./../../runtimes/linux/lib/$(TargetFramework)/$(AssemblyName).pdb</TargetPath>
        <TargetFramework>$(TargetFramework)</TargetFramework>
      </_TargetPathsToSymbols>
      <_TargetPathsToSymbols Include="$(OutputPath)win/$(AssemblyName).pdb">
        <TargetPath>./../../runtimes/win/lib/$(TargetFramework)/$(AssemblyName).pdb</TargetPath>
        <TargetFramework>$(TargetFramework)</TargetFramework>
      </_TargetPathsToSymbols>
    </ItemGroup>
  </Target>

</Project>
